package edu.cnm.deepdive.dungeonrun.model.entity;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import edu.cnm.deepdive.dungeonrun.configuration.Beans;
import java.net.URI;
import java.util.Date;
import java.util.UUID;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.Index;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.GenericGenerator;
import org.springframework.hateoas.server.EntityLinks;
import org.springframework.lang.NonNull;

/**
 * Attempt entity to hold the database of attempts generated and completed.
 * Indexes for difficulty and endTime will be indexed since this is a metric
 * that will be used for the implementation of leaderboards.
 */
// TODO Change endtime to time elapsed potentially.

@SuppressWarnings({"JpaDataSourceORMInspection"})
@Entity
@Table(
    indexes = {
        @Index(columnList = "difficulty, endTime"),
    }
)
@JsonIgnoreProperties(
    value = {
        "id", "startTime", "endTime"},
    allowGetters = true, ignoreUnknown = true
)
public class Attempt {

/**
 * Generates the UUID for levels. Levels are to be randomly generated each time a new game is started.
 **/
  @Id
  @GeneratedValue(generator = "uuid")
  @GenericGenerator(name = "uuid2", strategy = "uuid2")
  @Column(name = "attempt_id", nullable = false, updatable = false, columnDefinition = "CHAR(16) FOR BIT DATA")
  private UUID id;

  /**
   * Every time a level is generated by a user, it will be attached to the user's Id as well. This
   * will be implemented for use with the leaderboards.
   */
  @NonNull
  @ManyToOne (optional = false)
  @JoinColumn(name = "user_id", nullable = false, updatable = false)
  private User user;

  /**
   * When a new attempt is generated, a time stamp will generate with it.
   */
  @NonNull
  @CreationTimestamp
  @Temporal(TemporalType.TIMESTAMP)
  @Column(nullable = false, updatable = false)
  private Date startTime;

  /**
   * When the attempt is completed successfully an endTime stamp will be generated.
   */
  @Temporal(TemporalType.TIMESTAMP)
  private Date endTime;

  /**
   * Each attempt generated will have a set amount of time given depending on difficulty set.
   */
  @NonNull
  @Column(nullable = false, updatable = false)
  private int timeGiven;

  /**
   * Difficulty of mazes will be a range starting from 1-20. The difficulty will affect the size
   * of the maze created.
   */
  @NonNull
  @Column(nullable = false, updatable = false)
  private int difficulty;

  /**
   * Time elapsed will track the amount of time it takes the user to get through the maze.
   * The time elapsed will be a metric tracked for the leaderboards.
   */
  @NonNull
  @Column(nullable = false)
  private long timeElapsed;

  /**
   * When the level is completed successfully, it will receive a True boolean.
   */
  private boolean completed;

  /**
   * Receives the id for the generated level.
   */
  @NonNull
  public UUID getId() {
    return id;
  }

  /**
   * receives the user from User.class.
   */
  @NonNull
  public User getUser() {
    return user;
  }

  /**
   * Will set the user id when needed.
   */
  public void setUser(@NonNull User user) {
    this.user = user;
  }

  /**
   * Returns the generated start time for the level.
   */
  @NonNull
  public Date getStartTime() {
    return startTime;
  }

  /**
   * Gets the generated end time for the attempt when completed.
   */
  public Date getEndTime() {
    return endTime;
  }

  /**
   * Sets the end time for the attempt completed.
   * @param endTime
   */
  public void setEndTime(Date endTime) {
    this.endTime = endTime;
  }
  /**
   * Returns the timeGiven which will be based on difficulty of level.
   */
  @NonNull
  public int getTimeGiven() {
    return timeGiven;
  }

  /**
   * Will set time given when user starts a level and time given will be based on difficulty of level.
   */
  public void setTimeGiven(@NonNull int timeGiven) {
    this.timeGiven = timeGiven;
  }

  /**
   * Receives the difficulty chosen from the user.
   */
  @NonNull
  public int getDifficulty() {
    return difficulty;
  }

  /**
   * sets the difficulty in place when user starts level so the maze knows the size of the maze
   * to create.
   */
  public void setDifficulty(@NonNull int difficulty) {
    this.difficulty = difficulty;
  }

  /**
   * Gets the time elapsed which will be set once the user has completed the attempt.
   * @return
   */
  public long getTimeElapsed() {
    return timeElapsed;
  }

  /**
   * Sets the time elapsed upon completion of the attempt.
   * @param timeElapsed
   */
  public void setTimeElapsed(long timeElapsed) {
    this.timeElapsed = timeElapsed;
  }

  /**
   * Will return true when attempt is completed.
   */
  public boolean isCompleted() {
    return completed;
  }

  /**
   *Will set the boolean true upon completion.
   */
  public void setCompleted(boolean completed) {
    this.completed = completed;
  }

  /**
   * Allows the database to be generated into a URI to be accessed from the client or webserver.
   * @return Will return the data for the database.
   */
  public URI getHref() {
    EntityLinks entityLinks = Beans.bean(EntityLinks.class);
    return (id != null) ? entityLinks.linkForItemResource(Attempt.class, id).toUri() : null;
  }
}
